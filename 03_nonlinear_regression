{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true,
    "toc-nb-collapsed": true
   },
   "source": [
    "# NONLINEAR REGRESSION MODELS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- KNN - K-Nearest Neighbor\n",
    "- SVR - Support Vector Regression\n",
    "- MLP - Multilayer Perceptron (Artificial Neural Network)\n",
    "- CART - Classification and Regression Trees\n",
    "- Bagging (Bootstrap Aggregation)\n",
    "- RF - Random Forests\n",
    "- GBM - Gradients Boosting Machines\n",
    "- XGBoost - Extreme Gradient Boosting\n",
    "- LightGBM\n",
    "- CatBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "from sklearn.model_selection import train_test_split, GridSearchCV,cross_val_score\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import scale \n",
    "from sklearn import model_selection\n",
    "from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.ensemble import BaggingRegressor\n",
    "\n",
    "from warnings import filterwarnings\n",
    "filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true,
    "toc-nb-collapsed": true
   },
   "source": [
    "# KNN - K-Nearest Neighbor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Predictions are made according to observation similarity.\n",
    "- It is a nonparametric learning type; it is not very effective for big data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Fit KNN model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_model = KNeighborsRegressor().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                    metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                    weights='uniform')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**neighbors** - Neighborhood parameter; default value is 5. Optimize it!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Observing neighborhood parameter:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_model.n_neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'euclidean'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_model.effective_metric_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = knn_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Test error:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "426.6570764525201"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Train error for different k vakues:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE value for:  k = 1 is 0.0\n",
      "RMSE value for:  k = 2 is 179.52761335480352\n",
      "RMSE value for:  k = 3 is 205.20157172291863\n",
      "RMSE value for:  k = 4 is 220.5139794876305\n",
      "RMSE value for:  k = 5 is 239.64671325413764\n",
      "RMSE value for:  k = 6 is 243.5904190007242\n",
      "RMSE value for:  k = 7 is 258.1478781634636\n",
      "RMSE value for:  k = 8 is 266.05374203349805\n",
      "RMSE value for:  k = 9 is 269.73782093553376\n",
      "RMSE value for:  k = 10 is 271.2798300436963\n"
     ]
    }
   ],
   "source": [
    "RMSE = [] \n",
    "\n",
    "for k in range(10):\n",
    "    k = k+1\n",
    "    knn_model = KNeighborsRegressor(n_neighbors = k).fit(X_train, y_train)\n",
    "    y_pred = knn_model.predict(X_train) \n",
    "    rmse = np.sqrt(mean_squared_error(y_train,y_pred)) \n",
    "    RMSE.append(rmse) \n",
    "    print(\"RMSE value for: \", \"k =\" , k , \"is\", rmse)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Determine optimum k by using GridSearchCV method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- KNN parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_params = {'n_neighbors': np.arange(1,30,1)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn = KNeighborsRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_cv_model = GridSearchCV(knn, knn_params, cv = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=KNeighborsRegressor(algorithm='auto', leaf_size=30,\n",
       "                                           metric='minkowski',\n",
       "                                           metric_params=None, n_jobs=None,\n",
       "                                           n_neighbors=5, p=2,\n",
       "                                           weights='uniform'),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'n_neighbors': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n",
       "       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_cv_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Find the best parameter:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_cv_model.best_params_[\"n_neighbors\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Compare validated and unvalidated RMSE values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k = 1 RMSE value:  0.0    RMSE_CV value:  325.39475147063825\n",
      "k = 2 RMSE value:  179.52761335480352    RMSE_CV value:  293.24000183333817\n",
      "k = 3 RMSE value:  205.20157172291863    RMSE_CV value:  283.7486667487823\n",
      "k = 4 RMSE value:  220.5139794876305    RMSE_CV value:  286.3240222024089\n",
      "k = 5 RMSE value:  239.64671325413764    RMSE_CV value:  290.0705466132226\n",
      "k = 6 RMSE value:  243.5904190007242    RMSE_CV value:  298.1263115575851\n",
      "k = 7 RMSE value:  258.1478781634636    RMSE_CV value:  294.77070479194987\n",
      "k = 8 RMSE value:  266.05374203349805    RMSE_CV value:  291.98672028891235\n",
      "k = 9 RMSE value:  269.73782093553376    RMSE_CV value:  295.7162739573105\n",
      "k = 10 RMSE value:  271.2798300436963    RMSE_CV value:  301.31047022701154\n"
     ]
    }
   ],
   "source": [
    "RMSE = [] \n",
    "RMSE_CV = []\n",
    "for k in range(10):\n",
    "    k = k+1\n",
    "    knn_model = KNeighborsRegressor(n_neighbors = k).fit(X_train, y_train)\n",
    "    y_pred = knn_model.predict(X_train) \n",
    "    rmse = np.sqrt(mean_squared_error(y_train,y_pred)) \n",
    "    rmse_cv = np.sqrt(-1*cross_val_score(knn_model, X_train, y_train, cv=10, \n",
    "                                         scoring = \"neg_mean_squared_error\").mean())\n",
    "    RMSE.append(rmse) \n",
    "    RMSE_CV.append(rmse_cv)\n",
    "    print(\"k =\" , k , \"RMSE value: \", rmse, \"   RMSE_CV value: \", rmse_cv )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Use validated values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_tuned = KNeighborsRegressor(n_neighbors = knn_cv_model.best_params_[\"n_neighbors\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                    metric_params=None, n_jobs=None, n_neighbors=8, p=2,\n",
       "                    weights='uniform')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_tuned.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "413.7094731463598"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, knn_tuned.predict(X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true,
    "toc-nb-collapsed": true
   },
   "source": [
    "# SVR - Support Vector Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](img4.jpg)\n",
    "\n",
    "Epsilon - acceptable error\n",
    "\n",
    "**Purpose:** Find w and b parameters\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Linear SVR:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = pd.DataFrame(X_train[\"Hits\"])\n",
    "X_test = pd.DataFrame(X_test[\"Hits\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "svr_model = SVR(\"linear\").fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Prediction values for train:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([403.52804878, 666.91219512, 706.66829268, 194.80853659,\n",
       "       423.40609756])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_model.predict(X_train)[0:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Model equation of linear SVR:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = -48.69756097561513 + 4.969512195122093 x\n"
     ]
    }
   ],
   "source": [
    "print (\"y = {0} + {1} x\".format(svr_model.intercept_[0], \n",
    "                                svr_model.coef_[0][0])) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "183    91.0\n",
       "Name: Hits, dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train[\"Hits\"][0:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "403.5280487804953"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-48.69756097561513 + 4.969512195122093*91"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 2 variables -> simple SVR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = svr_model.predict(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Geometrical representation of simple SVR:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x10a988410>]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.scatter(X_train, y_train)\n",
    "plt.plot(X_train,y_pred, color = \"r\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Formulation of linear regression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = -8.814095480334572 + 5.1724561354706875 x\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "lm_model = LinearRegression().fit(X_train, y_train)\n",
    "lm_pred  = lm_model.predict(X_train)\n",
    "print(\"y = {0} + {1} x\".format(lm_model.intercept_, lm_model.coef_[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "461.879412847498"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-8.814095480334572 + 5.1724561354706875*91"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SVR prediction value:** 403\n",
    "\n",
    "**Linear regression prediction value:** 461"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Maaş (Salary)')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_train, y_train, alpha=0.5, s=23)\n",
    "plt.plot(X_train, lm_pred, 'g')\n",
    "plt.plot(X_train, y_pred, color='r')\n",
    "\n",
    "plt.xlabel(\"Atış Sayısı(Hits)\")\n",
    "plt.ylabel(\"Maaş (Salary)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**green** -> linear regression\n",
    "\n",
    "**red** -> SVR\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = -48.69756097561513 + 4.969512195122093 x\n"
     ]
    }
   ],
   "source": [
    "print (\"y = {0} + {1} x\".format(svr_model.intercept_[0], svr_model.coef_[0][0])) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([403.52804878])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_model.predict([[91]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Test error:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = svr_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "459.0187960365147"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import mean_squared_error\n",
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,\n",
       "    gamma='auto_deprecated', kernel='linear', max_iter=-1, shrinking=True,\n",
       "    tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,\n",
       "    gamma='auto_deprecated', kernel='linear', max_iter=-1, shrinking=True,\n",
       "    tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Tune C complexity parameter:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, GridSearchCV,cross_val_score\n",
    "svr_params = {\"C\": np.arange(0.1,2,0.1)}\n",
    "svr_cv_model = GridSearchCV(svr_model, svr_params, cv = 10).fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(svr_cv_model.best_params_)[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "svr_tuned = SVR(\"linear\", \n",
    "                C = pd.Series(svr_cv_model.best_params_)[0]).fit(X_train, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = svr_tuned.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "458.198966781116"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "458.198966781116"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true,
    "toc-nb-collapsed": true
   },
   "source": [
    "# Nonlinear SVR"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(3)\n",
    "\n",
    "x_sim = np.random.uniform(2, 10, 145)\n",
    "y_sim = np.sin(x_sim) + np.random.normal(0, 0.4, 145)\n",
    "\n",
    "x_outliers = np.arange(2.5, 5, 0.5)\n",
    "y_outliers = -5*np.ones(5)\n",
    "\n",
    "x_sim_idx = np.argsort(np.concatenate([x_sim, x_outliers]))\n",
    "x_sim = np.concatenate([x_sim, x_outliers])[x_sim_idx]\n",
    "y_sim = np.concatenate([y_sim, y_outliers])[x_sim_idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "ols = LinearRegression()\n",
    "ols.fit(np.sin(x_sim[:, np.newaxis]), y_sim)\n",
    "ols_pred = ols.predict(np.sin(x_sim[:, np.newaxis]))\n",
    "\n",
    "from sklearn.svm import SVR\n",
    "eps = 0.1\n",
    "svr = SVR('rbf', epsilon = eps)\n",
    "svr.fit(x_sim[:, np.newaxis], y_sim)\n",
    "svr_pred = svr.predict(x_sim[:, np.newaxis])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x_sim, y_sim, alpha=0.5, s=26)\n",
    "plt_ols, = plt.plot(x_sim, ols_pred, 'g')\n",
    "plt_svr, = plt.plot(x_sim, svr_pred, color='r')\n",
    "plt.xlabel(\"Bağımsız Değişken\")\n",
    "plt.ylabel(\"Bağımlı Değişken\")\n",
    "plt.ylim(-5.2, 2.2)\n",
    "plt.legend([plt_ols, plt_svr], ['EKK', 'SVR'], loc = 4);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Outliers affected linear regression more.\n",
    "\n",
    "- Fit nonlinear SVR model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "svr_rbf = SVR(\"rbf\").fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = svr_rbf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "473.4445984431814"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1,\n",
       "    gamma='auto_deprecated', kernel='rbf', max_iter=-1, shrinking=True,\n",
       "    tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_rbf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=SVR(C=1.0, cache_size=200, coef0=0.0, degree=3,\n",
       "                           epsilon=0.1, gamma='auto_deprecated', kernel='rbf',\n",
       "                           max_iter=-1, shrinking=True, tol=0.001,\n",
       "                           verbose=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'C': [0.01, 0.1, 0.4, 5, 10, 20, 30, 40, 50]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_params = {\"C\": [0.01, 0.1,0.4,5,10,20,30,40,50]}\n",
    "svr_cv_model = GridSearchCV(svr_rbf,svr_params, cv = 10)\n",
    "svr_cv_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Optimum C value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(svr_cv_model.best_params_)[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "svr_tuned = SVR(\"rbf\", C = pd.Series(svr_cv_model.best_params_)[0]).fit(X_train, \n",
    "                                                                        y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "472.20974524750574"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = svr_tuned.predict(X_test)\n",
    "\n",
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true,
    "toc-nb-collapsed": true
   },
   "source": [
    "# Multilayer Perceptrons (Artificial Neural Networks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "![](img5.jpg)\n",
    "\n",
    "![](img6.jpg)\n",
    "\n",
    "\n",
    "Artificial neural networks:\n",
    "\n",
    "![](img7.jpg)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Transformation - standardization:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "StandardScaler(copy=True, with_mean=True, with_std=True)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_scaled = scaler.transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Fit the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neural_network import MLPRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "mlp_model = MLPRegressor(hidden_layer_sizes = (100,20)).fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPRegressor(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
       "             beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
       "             hidden_layer_sizes=(100, 20), learning_rate='constant',\n",
       "             learning_rate_init=0.001, max_iter=200, momentum=0.9,\n",
       "             n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,\n",
       "             random_state=None, shuffle=True, solver='adam', tol=0.0001,\n",
       "             validation_fraction=0.1, verbose=False, warm_start=False)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlp_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Layer count:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlp_model.n_layers_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Hidden layers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 20)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlp_model.hidden_layer_sizes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = mlp_model.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "527.4270090447499"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPRegressor(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
       "             beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
       "             hidden_layer_sizes=(100, 20), learning_rate='constant',\n",
       "             learning_rate_init=0.001, max_iter=200, momentum=0.9,\n",
       "             n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,\n",
       "             random_state=None, shuffle=True, solver='adam', tol=0.0001,\n",
       "             validation_fraction=0.1, verbose=False, warm_start=False)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlp_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "mlp_params = {'alpha': [0.1, 0.01,0.02,0.005],\n",
    "             'hidden_layer_sizes': [(20,20),(100,50,150),(300,200,150)],\n",
    "             'activation': ['relu','logistic']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "mlp_cv_model = GridSearchCV(mlp_model, mlp_params, cv = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=MLPRegressor(activation='relu', alpha=0.0001,\n",
       "                                    batch_size='auto', beta_1=0.9, beta_2=0.999,\n",
       "                                    early_stopping=False, epsilon=1e-08,\n",
       "                                    hidden_layer_sizes=(100, 20),\n",
       "                                    learning_rate='constant',\n",
       "                                    learning_rate_init=0.001, max_iter=200,\n",
       "                                    momentum=0.9, n_iter_no_change=10,\n",
       "                                    nesterovs_momentum=True, power_t=0.5,\n",
       "                                    random_state=None, shuffle=True,\n",
       "                                    solver='adam', tol=0.0001,\n",
       "                                    validation_fraction=0.1, verbose=False,\n",
       "                                    warm_start=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'activation': ['relu', 'logistic'],\n",
       "                         'alpha': [0.1, 0.01, 0.02, 0.005],\n",
       "                         'hidden_layer_sizes': [(20, 20), (100, 50, 150),\n",
       "                                                (300, 200, 150)]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlp_cv_model.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Best parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'activation': 'relu', 'alpha': 0.01, 'hidden_layer_sizes': (100, 50, 150)}"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlp_cv_model.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "mlp_tuned = MLPRegressor(alpha = 0.02, hidden_layer_sizes = (100,50,150))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLPRegressor(activation='relu', alpha=0.02, batch_size='auto', beta_1=0.9,\n",
       "             beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
       "             hidden_layer_sizes=(100, 50, 150), learning_rate='constant',\n",
       "             learning_rate_init=0.001, max_iter=200, momentum=0.9,\n",
       "             n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,\n",
       "             random_state=None, shuffle=True, solver='adam', tol=0.0001,\n",
       "             validation_fraction=0.1, verbose=False, warm_start=False)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlp_tuned.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = mlp_tuned.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "361.77739022461884"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true,
    "toc-nb-collapsed": true
   },
   "source": [
    "# CART - Classification and Regression Trees"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Purpose:** Convert complex things into simle decision structures. Create homogen subgroups from a heterogen dataset.\n",
    "\n",
    "![](img9.jpg)\n",
    "\n",
    "![](img10.jpg)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = pd.DataFrame(X_train[\"Hits\"])\n",
    "X_test = pd.DataFrame(X_test[\"Hits\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "cart_model = DecisionTreeRegressor(max_leaf_nodes = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                      max_leaf_nodes=10, min_impurity_decrease=0.0,\n",
       "                      min_impurity_split=None, min_samples_leaf=1,\n",
       "                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                      presort=False, random_state=None, splitter='best')"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cart_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                      max_leaf_nodes=10, min_impurity_decrease=0.0,\n",
       "                      min_impurity_split=None, min_samples_leaf=1,\n",
       "                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                      presort=False, random_state=None, splitter='best')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cart_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Create grid for regression rule points:\n",
    "\n",
    "- Create scatter plot for salary and hits variables:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01) \n",
    "X_grid = X_grid.reshape((len(X_grid), 1))  \n",
    "plt.scatter(X_train, y_train, color = 'red') \n",
    "plt.plot(X_grid, cart_model.predict(X_grid), color = 'blue')  \n",
    "plt.title('CART Regression Tree')  \n",
    "plt.xlabel('Hits') \n",
    "plt.ylabel('Salary') ;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [91]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "345.2011551724138"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(345.2011551724138 if x[0] <= 117.5 else ((((1300.0 if x[0] <= 118.5 else \n",
    "    641.0) if x[0] <= 122.5 else 1468.5236666666667) if x[0] <= 125.5 else \n",
    "    621.9679230769232) if x[0] <= 143.0 else (958.6111111111111 if x[0] <= \n",
    "    150.5 else 2460.0) if x[0] <= 151.5 else 499.1666666666667 if x[0] <= \n",
    "    157.5 else 892.5402413793104) if x[0] <= 225.5 else 1975.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([621.96792308, 958.61111111, 621.96792308, 345.20115517,\n",
       "       345.20115517])"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cart_model.predict(X_test)[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([345.20115517])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cart_model.predict([[91]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred =cart_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "486.34593105235456"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "cart_model = DecisionTreeRegressor()\n",
    "cart_model.fit(X_train, y_train)\n",
    "y_pred = cart_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "468.49579052913884"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "cart_params = {\"min_samples_split\": range(2,100),\n",
    "               \"max_leaf_nodes\": range(2,10)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "cart_cv_model = GridSearchCV(cart_model, cart_params, cv = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=DecisionTreeRegressor(criterion='mse', max_depth=None,\n",
       "                                             max_features=None,\n",
       "                                             max_leaf_nodes=None,\n",
       "                                             min_impurity_decrease=0.0,\n",
       "                                             min_impurity_split=None,\n",
       "                                             min_samples_leaf=1,\n",
       "                                             min_samples_split=2,\n",
       "                                             min_weight_fraction_leaf=0.0,\n",
       "                                             presort=False, random_state=None,\n",
       "                                             splitter='best'),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'max_leaf_nodes': range(2, 10),\n",
       "                         'min_samples_split': range(2, 100)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cart_cv_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_leaf_nodes': 9, 'min_samples_split': 76}"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cart_cv_model.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "cart_tuned = DecisionTreeRegressor(max_leaf_nodes = 9, min_samples_split = 37)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                      max_leaf_nodes=9, min_impurity_decrease=0.0,\n",
       "                      min_impurity_split=None, min_samples_leaf=1,\n",
       "                      min_samples_split=37, min_weight_fraction_leaf=0.0,\n",
       "                      presort=False, random_state=None, splitter='best')"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cart_tuned.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = cart_tuned.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "434.2326688144208"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true,
    "toc-nb-collapsed": true
   },
   "source": [
    "# Bagged Trees Regresyon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingRegressor(base_estimator=None, bootstrap=True, bootstrap_features=True,\n",
       "                 max_features=1.0, max_samples=1.0, n_estimators=10,\n",
       "                 n_jobs=None, oob_score=False, random_state=None, verbose=0,\n",
       "                 warm_start=False)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_model = BaggingRegressor(bootstrap_features = True)\n",
    "bag_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**n_estimators** -> how many trees?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_model.n_estimators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=1875850171, splitter='best'),\n",
       " DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=1686320658, splitter='best'),\n",
       " DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=2106270115, splitter='best'),\n",
       " DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=604160287, splitter='best'),\n",
       " DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=1818112300, splitter='best'),\n",
       " DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=1144551074, splitter='best'),\n",
       " DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=1634764234, splitter='best'),\n",
       " DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=820974251, splitter='best'),\n",
       " DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=1387516839, splitter='best'),\n",
       " DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                       min_impurity_split=None, min_samples_leaf=1,\n",
       "                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                       presort=False, random_state=2009973545, splitter='best')]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_model.estimators_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Samples in each tree:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([120, 102, 141,  16,  82,  35, 147,  84,   6, 161, 141, 164, 178,\n",
       "        119,  59,  89,  83, 116, 180,  74, 128,  70,  48,  73, 157, 173,\n",
       "         67,  89, 127, 108, 110, 162,  39, 151,  81,  52, 171,  40, 152,\n",
       "        129,  56, 100, 129, 125,  53, 101, 140, 101, 114,  26,   4,  19,\n",
       "         59,   1, 195, 132, 162,  79, 176,  97,  79, 165, 132, 163,  62,\n",
       "        147, 170,  92,  29,  44,   7, 195, 188,  52,  93, 183, 138, 175,\n",
       "         99,  40,  90,  45, 195,  20,  62,  86, 135, 115,  95,   7,  59,\n",
       "        123, 143, 171, 120,  72,  75, 183, 190,  64,  56,  83, 174,  94,\n",
       "        166, 132,  12,  25, 113, 185, 187,   8,  14,  70,  21,  36, 101,\n",
       "         30,  96, 112,   1, 138, 149,  46,  46,  78,  22, 109,  93, 140,\n",
       "         33,  70, 179,  38,  35,  85,  75,  11, 153, 151,  76,  39, 136,\n",
       "         99,  28, 108,  54, 179,  83,  32,   0, 130, 142, 194, 140,  38,\n",
       "         51,   6,  44,  70,  15, 174,  23, 125, 100,  90,  50, 139,  32,\n",
       "        107,  51, 143, 179, 185,  50,  27, 115, 175, 168, 166, 132,  63,\n",
       "         80, 180,  29,  70, 138, 118,  68,  37,  57,  32, 161, 117,  40,\n",
       "         57,  57]),\n",
       " array([175, 142,  67, 175,  63,  74,  42, 124, 165, 168,  50, 105,  87,\n",
       "        122,  11,  42, 155, 191,  83, 175,  96,  59,  71,  70, 172, 113,\n",
       "        119, 169, 192,   7, 104, 126, 179, 153,  50,  43,  12,  24,  42,\n",
       "        170, 173, 169,  43,  89,  91, 196,  17,  52,  67, 125, 128,  33,\n",
       "        180, 143, 149,  64, 144, 191,  65,   9,  87, 180,  83, 137, 130,\n",
       "        103, 137, 151, 119, 174, 105, 133,  65,  16,  41,   5,  18, 177,\n",
       "        140,  36, 126, 142,  57, 150, 172,  32, 123,  64, 168,   0, 126,\n",
       "          8, 116,  85,  19,   7,  28, 194, 146, 143, 153,  34,  19,  91,\n",
       "        137, 172,  11,  65,  48,  75,  42,  65, 108, 184, 174,  81, 125,\n",
       "         27,  12,  71,  98, 186,   5,  92, 178, 162,  12,  28, 138,  65,\n",
       "         22, 117, 160, 145, 177, 155, 164, 184, 125,  98,  40, 131, 159,\n",
       "        188, 193,  87,  71, 147, 196, 184,  76, 139,  22,  33,  48, 105,\n",
       "         86, 166, 158,  57, 179, 139, 177,  31,  29, 142,  72, 139,  47,\n",
       "         74,   6, 116, 118,  76,  80, 143, 144,  76, 173,  25,  77,  68,\n",
       "        149, 192, 111,  38, 172, 164,  65,  10, 170, 190, 112, 159, 162,\n",
       "          1,  66]),\n",
       " array([114,  83, 154,  30,  19, 164,  24, 186, 109, 174, 165,  87,   3,\n",
       "        170, 196, 116,  43, 171,  46, 142,   9, 116, 184,  90, 191,  26,\n",
       "        168, 153,  98,  20,  94, 119,  11, 138,  70, 135, 193,  54, 103,\n",
       "        150, 104, 183, 169,   7, 153,  52, 131, 127, 193, 167,  99,  90,\n",
       "        141, 172, 102, 158,  54, 146,  36,  16,  24,   4, 113,  22,  82,\n",
       "          0, 168,  54,  51, 120,  95,  63, 111, 182,  47,  41,  69,  57,\n",
       "        183, 167,  74,  44,  48, 168, 101, 111,  43, 182,  47,  96, 196,\n",
       "         65, 106, 158, 131, 113, 118,  55,  99,  15, 139, 105,  81, 114,\n",
       "         80,  30,  21, 162, 118,  50, 109,  92,  84,  74,  35,  46, 117,\n",
       "         61,   9,  23, 120, 127, 119, 190,  36, 175, 121, 161,  22,   9,\n",
       "         29, 109, 104, 123, 132,  40, 175, 106,  13, 111, 119, 151, 124,\n",
       "         98,   1, 136, 172,  51, 139,  73,  39, 194,  45, 106, 163, 192,\n",
       "        135, 171,  48,  70,  40, 175, 186, 190, 141, 166, 147,  56,   2,\n",
       "        188,  93, 128,  79, 120,  80,  27, 123,  73,  19,  44, 130,   0,\n",
       "         58,  28,  54,  26, 157,  23,  26, 147,  87,  20, 172, 139, 158,\n",
       "         60,  51]),\n",
       " array([107, 168, 125,  58, 151, 107, 130,  24,  84,  52, 100, 149,  87,\n",
       "        113,  85,  44, 142, 157,  78,  31,  34, 145,  89, 132,  19, 187,\n",
       "         87,  58,   5, 155, 125,   0,  34,  90, 191, 121, 130,  94,  63,\n",
       "         21,  88, 132,  76, 176, 104,   5, 126,  49,  89, 138,  60,  84,\n",
       "        157,   7,  21,   0,  35, 130,  40, 125, 131, 139,  23, 155, 129,\n",
       "         26,  17,  16, 147, 161, 193, 141, 125, 165, 118, 158,  90,  62,\n",
       "         13,  11, 193,  70,  14, 123, 159, 133,  50, 160, 109, 127,  67,\n",
       "        196,  96, 140, 145, 119, 131,  48, 164,  20,  80, 181,  74,  39,\n",
       "         52,   7, 186,  14,  96,   2, 142,  92, 173,  70, 152, 175,  37,\n",
       "          1,  77, 166,  62,  29, 120, 116, 152,  30,  45,  27, 139,   1,\n",
       "         81, 196, 194,  76, 138, 118,  10,  85,  50, 145, 156,  35, 122,\n",
       "          4, 127,  21, 130,  74, 135, 144, 150, 160, 142, 144, 136,  22,\n",
       "        147,  12, 164,  60,  85, 165,  16, 193, 180,  92, 132, 112, 158,\n",
       "        129, 173, 100, 117,  94, 180, 194, 116, 160, 196, 140, 107, 162,\n",
       "        134,  77, 142, 169,  48,   6, 112,  40, 146,  18,  71, 195,  95,\n",
       "         44,  98]),\n",
       " array([110,  43, 149,   0,  99,  43, 193, 105, 124, 122, 144,  88, 180,\n",
       "        170, 125, 104,  91,  62,  27,  84,  15, 186,   4, 179,  12, 190,\n",
       "        105, 172,  72,  56, 170, 124,  45,  92, 139,  12,  73, 160, 127,\n",
       "         42, 103, 131, 166,  51,  71, 143, 154, 134, 143,  55,   8,  85,\n",
       "         87,  29,  97,   4,  65, 149,  31,  16, 125,  61,  83,  66,  31,\n",
       "         15, 131,  23, 190, 171, 161, 145,  43,  21,   7, 172, 151,  15,\n",
       "        133, 145,  26, 138, 158,  90,  77, 184,  21, 122,  35, 122,  93,\n",
       "         21, 125,  63,  19, 100,   6, 183, 142, 167,  44,  84,  15,  69,\n",
       "          7,  70,  62, 163, 169,  19,  67,  91,   3,  16, 164, 107,  31,\n",
       "        103, 165,  22,   9, 108,   7, 136,  97,  48, 120, 126, 111, 117,\n",
       "        145, 187, 180,  84,  86, 111, 167, 192, 134,  48, 125, 116,  71,\n",
       "         89, 174, 185,  93, 173,  95, 159,  11, 182, 157,  59,  14,  27,\n",
       "         92,  82,  96,  32, 131, 191,  44, 132, 120,  42, 134, 115, 165,\n",
       "         96,  48,  54, 121,  77,   8,  49, 146, 133, 186, 102, 183,  57,\n",
       "        125, 143,  65, 109, 101, 158, 115,  26, 180,  92,  19,  26, 122,\n",
       "        168, 176]),\n",
       " array([161,  71,  54,  24, 127, 177,  73, 123,   6,  86,  22,  73,  17,\n",
       "         42, 121,  89, 178,   7,  64, 190,  89,  93,  51,   6, 190, 120,\n",
       "        162, 120, 108, 121,  65, 154,  32,  37,  48,  96,  64, 148,  73,\n",
       "        152, 186,  51,  15, 190,  79, 120,  28,  96,  36, 163,  96,  17,\n",
       "        104,  25, 196,  49,  74,  51,  62, 107, 103, 108, 143,  57, 188,\n",
       "        101, 158, 195,  33, 122,  23,  64,  97, 146,  24, 160,  27, 172,\n",
       "         27,  95,  22, 110,  52, 154,  22, 145,  66,   6, 196, 114,  28,\n",
       "        158, 115,  26,  25,  97,  49,  56,  52, 117, 155,  82, 154, 184,\n",
       "        137, 183, 147, 156,  58,  47,  27,  47, 176,  47, 180, 102, 119,\n",
       "        191,  66,  52, 160, 154,  35, 165, 191, 121,  12, 155,   4,  25,\n",
       "         40,  62,   0,  22,  72, 106,  39,  32, 110,  71,  14,  77, 159,\n",
       "        184, 158,  37, 118,  21, 109, 129, 105, 101, 147,  48,  73, 140,\n",
       "         86, 185,  76, 187,  71, 175, 189, 143,  51, 143, 115, 195,  81,\n",
       "         18,  24,  16, 184,  46, 149, 156,  31,  67,  36,  57, 104, 167,\n",
       "          9,  17,  94,  75,  39,  82, 186,  64,  28,   9, 153, 129,  20,\n",
       "        130,  55]),\n",
       " array([ 54, 115,  38,  30,  72, 144, 178, 176, 102,  51, 154, 129, 181,\n",
       "         77,  75, 180, 110,  75, 144, 196,  52, 196, 179, 174,  61, 115,\n",
       "         75, 157, 196, 193, 101, 127, 162,  51,  18, 132, 168,  79, 155,\n",
       "        114,  14, 138,  16, 158,  84, 135, 122,  74,  79,  45, 110, 114,\n",
       "        181, 106,  64,   2, 121, 155, 114,  72,  79, 131,  74, 162,   2,\n",
       "        174, 144, 183,  16,  93, 138, 182, 130,  94,  29,   8,   4, 118,\n",
       "        179, 131, 137, 152, 153, 145, 159,  85, 101, 194, 105,  90,  54,\n",
       "         51, 164, 111,  97, 189, 110,  62,  99, 165, 164, 172,   5, 194,\n",
       "        133, 130,  74,  42, 101,  22,  84, 126, 116,  94,  36,  66, 167,\n",
       "        100, 175,  26, 115,   1, 143, 181, 143, 126,  60, 149, 132,  96,\n",
       "         28, 169,  77, 188,  53,  66, 113, 129, 158,  80, 138, 128,  94,\n",
       "        105, 142, 116,  67,  59, 177, 183, 128, 175, 162,  72, 152,  40,\n",
       "         87, 161,  93, 105, 142, 184, 116, 104,  67,  31, 118,  58,  86,\n",
       "        104,  15,  22,  13, 175, 134, 116, 189,   7,  75,  27,  10, 145,\n",
       "         30, 127,  28,  31,  73,   3, 158,   2, 123, 144, 150, 157,  69,\n",
       "        138, 142]),\n",
       " array([139, 169, 105,  70,  46,  13, 171, 109,  43, 193,  50, 192, 167,\n",
       "          8, 189, 181,  63,   6,  24, 119, 143, 140,  79,  25, 192, 120,\n",
       "        145,   3,  99,  90, 139,  76,  73, 148, 169,  83, 137,  94, 136,\n",
       "        138,  18, 155, 175, 112,  31,  66,   8, 154, 118,  95, 172,  51,\n",
       "        158, 192,  11, 110,   2,  58,  75, 163, 121, 150,  77,  37, 146,\n",
       "         79,  87,  91, 137,  70, 135,  34, 140,  39,  65,  98,  71,  62,\n",
       "         52,   7,  26,  24,  90, 133,  93,  21, 112, 136, 160,  39,  43,\n",
       "         36,  57,  37,  25,  83,  75, 136, 170,  61,  27,  72,  75,  66,\n",
       "        105, 135,  13,  55,  79, 130, 110,  21,  53,   2, 141, 143, 122,\n",
       "        148, 146,  11,  36,  21,  66, 140, 159, 115,  80, 189,  42,  74,\n",
       "        153, 141, 158, 132,  51,  31,   7, 120, 167, 127, 103,  43, 169,\n",
       "          5,  74,  75, 167, 146, 141,  42, 119,  26,  25,  46,  31, 187,\n",
       "        168, 171,  80, 160, 135,  66,   3,  98, 120, 123,  42,  89, 151,\n",
       "         13,  55, 140, 127, 193, 158, 114, 143, 105,  47,  89, 146,  72,\n",
       "         11, 113,   4,  25, 143, 188,  81, 129,  36, 111,  96,  28,   4,\n",
       "        196,  95]),\n",
       " array([ 18, 194,  10,   1, 147,  20,  10, 162,  40, 143,  30, 162,  19,\n",
       "         28, 195,  32,  56,  61, 125, 171, 119,  78, 187, 143,  28, 188,\n",
       "        105,  63, 108, 154, 173,  14,  61, 163, 183, 103,  49, 159, 167,\n",
       "         20,  73, 155, 178,  15,   7, 155, 107, 151, 173,  58,  17, 100,\n",
       "         39,  95, 170, 174, 109,   6,  50,  51,  49,   0,  31,  80,   2,\n",
       "        114, 134,  39, 156,  90,  27,  89,  78,  41,  53, 130, 185,  58,\n",
       "         64,  27, 119, 155,  50, 159, 133,  64, 184, 168,   4, 129,  63,\n",
       "        175,  95,  82,   5, 141, 111, 130,  44,  29, 195,  21, 154, 142,\n",
       "         18, 128,  52,  17,   4,   8,  79, 143, 129, 184, 123,  35,  85,\n",
       "        115,  66, 113, 165,  17, 136, 140, 176, 151, 155,  80, 121,   0,\n",
       "        134, 191,  80,  45, 137, 175,  23,  69, 192,  29,  33, 112,  45,\n",
       "        157,  98,  24,  50,  42, 154,  47, 142, 183, 185, 152,  82,  78,\n",
       "        119,   3,  28,  18, 120,  31,  92, 107, 182, 182, 160, 116,  60,\n",
       "         87, 104,  72, 131, 185,  37,  71,  90,   7, 121,  59,  72, 187,\n",
       "         60, 104,  14, 194,  74, 150, 176,  17, 137,   5, 111, 150,   0,\n",
       "         62,  62]),\n",
       " array([146, 149,  89,  22,  77,  91,  61, 169, 150,  38, 178,  97,  65,\n",
       "         47, 187, 162, 125,  54, 143,   1, 183, 126, 191,  46, 124,  22,\n",
       "         57, 185, 169, 125,  82, 135,  92,  52,  97,  86,  87,  35, 150,\n",
       "        185, 188,   5, 111,  26,  20, 151, 194,  11,  89, 168, 101, 138,\n",
       "        104,  36,  25,  19,  59, 107, 192,   4, 190,  35, 187, 172,  24,\n",
       "        185,  30,  85,   1,  55,  98,   9,  69, 163, 142,  66, 178,  61,\n",
       "         52, 102, 138, 166, 151, 140, 100, 178, 183, 142,  54, 130,  38,\n",
       "        143, 107, 106,  20,  94,  42,  83, 192, 160,  74,   8,   5,  43,\n",
       "         40, 196,  62,  30,   4, 172,  16, 185,  35, 104, 143,  24, 165,\n",
       "         56,  14, 111,  45, 177, 104, 139, 159,  27, 170,  35, 120,  57,\n",
       "         43,  87,  37,  96, 185,  34,   8, 177,  14, 169, 100, 189,  92,\n",
       "         41, 122,  42, 167, 132, 132, 175,  65, 171,  85,  19,  58, 164,\n",
       "         20, 177,  22, 162,  41,  18, 100,  97,  43, 124,  23, 153,  22,\n",
       "          3, 156,  64, 180, 121, 117,  51, 168, 170, 110,  10,  94,  83,\n",
       "         86, 167,  57, 130,  83, 134,  63, 154, 125,  86,  86,  58,   9,\n",
       "         96, 110])]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_model.estimators_samples_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Independent variables and index in each tree:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([ 1,  3, 15, 11,  8,  1,  0, 14,  2, 17,  6,  7, 15, 17, 17,  1,  3,\n",
       "        13, 14]),\n",
       " array([16,  6,  7, 10,  8,  3, 11,  2,  1, 11,  8,  6,  4,  1, 14, 16, 15,\n",
       "        18, 15]),\n",
       " array([14,  7, 11,  0, 18,  4,  8, 12,  4, 14, 14,  4, 14, 13,  4,  4,  6,\n",
       "        15, 18]),\n",
       " array([ 4, 15, 16,  9, 11, 18,  5, 14,  6, 17,  3, 12,  2,  5,  2,  4,  0,\n",
       "         9, 14]),\n",
       " array([ 9,  7, 13, 18, 11, 13,  0,  4, 13, 10,  1,  8, 17, 14, 13, 13, 13,\n",
       "        11, 14]),\n",
       " array([15,  3, 14,  2,  5,  5, 12, 15, 18,  1,  1, 18,  8, 12,  7,  0, 18,\n",
       "         3,  1]),\n",
       " array([18,  2,  1,  8, 17,  1, 14, 15, 13, 13,  0, 15, 13, 13, 14, 15, 18,\n",
       "         1,  6]),\n",
       " array([16,  7,  6, 17,  9, 14,  4,  9,  9,  2,  5, 17,  3, 10, 11,  6, 11,\n",
       "         8, 11]),\n",
       " array([ 7, 17,  2,  7,  5, 10, 13,  9,  5, 16, 18, 17,  8, 13, 16, 12,  6,\n",
       "        12, 18]),\n",
       " array([ 0, 12,  8,  0, 16,  0,  3,  5, 15, 17, 10,  2,  9,  5,  0, 11, 14,\n",
       "         7, 18])]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_model.estimators_features_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Model for each tree:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n",
       "                      max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "                      min_impurity_split=None, min_samples_leaf=1,\n",
       "                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                      presort=False, random_state=1686320658, splitter='best')"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_model.estimators_[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = bag_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "348.0232963415683"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Ask each tree:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "two_y_pred = bag_model.estimators_[1].fit(X_train, y_train).predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "525.2861082332641"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, two_y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "seven_y_pred = bag_model.estimators_[6].fit(X_train, y_train).predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "536.7753604989736"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, seven_y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingRegressor(base_estimator=None, bootstrap=True, bootstrap_features=True,\n",
       "         max_features=1.0, max_samples=1.0, n_estimators=10, n_jobs=None,\n",
       "         oob_score=False, random_state=None, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_model = BaggingRegressor(bootstrap_features = True)\n",
    "bag_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "bag_params = {\"n_estimators\": range(2,20)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [],
   "source": [
    "bag_cv_model = GridSearchCV(bag_model, bag_params, cv = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "       estimator=BaggingRegressor(base_estimator=None, bootstrap=True, bootstrap_features=True,\n",
       "         max_features=1.0, max_samples=1.0, n_estimators=10, n_jobs=None,\n",
       "         oob_score=False, random_state=None, verbose=0, warm_start=False),\n",
       "       fit_params=None, iid='warn', n_jobs=None,\n",
       "       param_grid={'n_estimators': range(2, 20)}, pre_dispatch='2*n_jobs',\n",
       "       refit=True, return_train_score='warn', scoring=None, verbose=0)"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_cv_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_estimators': 18}"
      ]
     },
     "execution_count": 266,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_cv_model.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "bag_tuned = BaggingRegressor( n_estimators = 18, random_state = 45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingRegressor(base_estimator=None, bootstrap=True,\n",
       "         bootstrap_features=False, max_features=1.0, max_samples=1.0,\n",
       "         n_estimators=18, n_jobs=None, oob_score=False, random_state=45,\n",
       "         verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_tuned.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = bag_tuned.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "339.22087703488455"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Determine model specifications and fit the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_model = RandomForestRegressor(random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "                      max_features='auto', max_leaf_nodes=None,\n",
       "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                      min_samples_leaf=1, min_samples_split=2,\n",
       "                      min_weight_fraction_leaf=0.0, n_estimators=10,\n",
       "                      n_jobs=None, oob_score=False, random_state=42, verbose=0,\n",
       "                      warm_start=False)"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 782.2   , 1071.75  , 1619.    ,  147.4167,  671.    ])"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_model.predict(X_test)[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = rf_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "373.04044281427"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_params = {'max_depth': list(range(1,10)),\n",
    "            'max_features': [3,5,10,15],\n",
    "            'n_estimators' : [100, 200, 500, 1000, 2000]}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- It is said that 500 and 1000 works well as tree count:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_model = RandomForestRegressor(random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_cv_model = GridSearchCV(rf_model, \n",
    "                           rf_params, \n",
    "                           cv = 10, \n",
    "                            n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=RandomForestRegressor(bootstrap=True, criterion='mse',\n",
       "                                             max_depth=None,\n",
       "                                             max_features='auto',\n",
       "                                             max_leaf_nodes=None,\n",
       "                                             min_impurity_decrease=0.0,\n",
       "                                             min_impurity_split=None,\n",
       "                                             min_samples_leaf=1,\n",
       "                                             min_samples_split=2,\n",
       "                                             min_weight_fraction_leaf=0.0,\n",
       "                                             n_estimators='warn', n_jobs=None,\n",
       "                                             oob_score=False, random_state=42,\n",
       "                                             verbose=0, warm_start=False),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'max_depth': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
       "                         'max_features': [3, 5, 10, 15],\n",
       "                         'n_estimators': [100, 200, 500, 1000, 2000]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_cv_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 8, 'max_features': 3, 'n_estimators': 200}"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_cv_model.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_tuned = RandomForestRegressor(max_depth  = 8, \n",
    "                                 max_features = 3, \n",
    "                                 n_estimators =200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=8,\n",
       "                      max_features=3, max_leaf_nodes=None,\n",
       "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                      min_samples_leaf=1, min_samples_split=2,\n",
       "                      min_weight_fraction_leaf=0.0, n_estimators=200,\n",
       "                      n_jobs=None, oob_score=False, random_state=None,\n",
       "                      verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_tuned.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = rf_tuned.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "344.30332133651706"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Significance level of variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "Importance = pd.DataFrame({\"Importance\": rf_tuned.feature_importances_*100},\n",
    "                         index = X_train.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Değişken Önem Düzeyleri')"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Importance.sort_values(by = \"Importance\", \n",
    "                       axis = 0, \n",
    "                       ascending = True).plot(kind =\"barh\", color = \"r\")\n",
    "\n",
    "plt.xlabel(\"Değişken Önem Düzeyleri\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gradient Boosting Machines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Trees are dependent; iterative.\n",
    "\n",
    "![](img13.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingRegressor(alpha=0.9, criterion='friedman_mse', init=None,\n",
       "                          learning_rate=0.1, loss='ls', max_depth=3,\n",
       "                          max_features=None, max_leaf_nodes=None,\n",
       "                          min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                          min_samples_leaf=1, min_samples_split=2,\n",
       "                          min_weight_fraction_leaf=0.0, n_estimators=100,\n",
       "                          n_iter_no_change=None, presort='auto',\n",
       "                          random_state=None, subsample=1.0, tol=0.0001,\n",
       "                          validation_fraction=0.1, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gbm_model = GradientBoostingRegressor()\n",
    "gbm_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "357.6330621791598"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = gbm_model.predict(X_test)\n",
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "gbm_params = {\n",
    "    'learning_rate': [0.001, 0.01, 0.1, 0.2],\n",
    "    'max_depth': [3, 5, 8,50,100],\n",
    "    'n_estimators': [200, 500, 1000, 2000],\n",
    "    'subsample': [1,0.5,0.75],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 240 candidates, totalling 2400 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:    2.8s\n",
      "[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:   36.7s\n",
      "[Parallel(n_jobs=-1)]: Done 357 tasks      | elapsed:  2.3min\n",
      "[Parallel(n_jobs=-1)]: Done 640 tasks      | elapsed:  4.7min\n",
      "[Parallel(n_jobs=-1)]: Done 1005 tasks      | elapsed:  6.5min\n",
      "[Parallel(n_jobs=-1)]: Done 1450 tasks      | elapsed:  9.1min\n",
      "[Parallel(n_jobs=-1)]: Done 1977 tasks      | elapsed: 10.7min\n",
      "[Parallel(n_jobs=-1)]: Done 2400 out of 2400 | elapsed: 11.9min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=GradientBoostingRegressor(alpha=0.9,\n",
       "                                                 criterion='friedman_mse',\n",
       "                                                 init=None, learning_rate=0.1,\n",
       "                                                 loss='ls', max_depth=3,\n",
       "                                                 max_features=None,\n",
       "                                                 max_leaf_nodes=None,\n",
       "                                                 min_impurity_decrease=0.0,\n",
       "                                                 min_impurity_split=None,\n",
       "                                                 min_samples_leaf=1,\n",
       "                                                 min_samples_split=2,\n",
       "                                                 min_weight_fraction_leaf=0.0,\n",
       "                                                 n_estimators=100,\n",
       "                                                 n_ite...\n",
       "                                                 presort='auto',\n",
       "                                                 random_state=None,\n",
       "                                                 subsample=1.0, tol=0.0001,\n",
       "                                                 validation_fraction=0.1,\n",
       "                                                 verbose=0, warm_start=False),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'learning_rate': [0.001, 0.01, 0.1, 0.2],\n",
       "                         'max_depth': [3, 5, 8, 50, 100],\n",
       "                         'n_estimators': [200, 500, 1000, 2000],\n",
       "                         'subsample': [1, 0.5, 0.75]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=2)"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gbm = GradientBoostingRegressor()\n",
    "gbm_cv_model = GridSearchCV(gbm, gbm_params, cv = 10, n_jobs = -1, verbose = 2)\n",
    "gbm_cv_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'learning_rate': 0.1, 'max_depth': 50, 'n_estimators': 200, 'subsample': 0.5}"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gbm_cv_model.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "gbm_tuned = GradientBoostingRegressor(learning_rate = 0.2,  \n",
    "                                      max_depth = 3, \n",
    "                                      n_estimators =1000, \n",
    "                                      subsample = 0.75)\n",
    "\n",
    "gbm_tuned = gbm_tuned.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "356.11062627113466"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = gbm_tuned.predict(X_test)\n",
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "Importance = pd.DataFrame({\"Importance\": gbm_tuned.feature_importances_*100},\n",
    "                         index = X_train.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Değişken Önem Düzeyleri')"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Importance.sort_values(by = \"Importance\", \n",
    "                       axis = 0, \n",
    "                       ascending = True).plot(kind =\"barh\", color = \"r\")\n",
    "\n",
    "plt.xlabel(\"Değişken Önem Düzeyleri\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# XGBoost - Extreme Gradient Boosting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "DM_train = xgb.DMatrix(data = X_train, label = y_train)\n",
    "DM_test = xgb.DMatrix(data = X_test, label = y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[14:30:13] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    }
   ],
   "source": [
    "xgb_model = XGBRegressor().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "359.91750599447033"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = xgb_model.predict(X_test)\n",
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "             colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
       "             importance_type='gain', learning_rate=0.1, max_delta_step=0,\n",
       "             max_depth=3, min_child_weight=1, missing=None, n_estimators=100,\n",
       "             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n",
       "             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
       "             silent=None, subsample=1, verbosity=1)"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb_grid = {\n",
    "     'colsample_bytree': [0.4, 0.5,0.6,0.9,1], \n",
    "     'n_estimators':[100, 200, 500, 1000],\n",
    "     'max_depth': [2,3,4,5,6],\n",
    "     'learning_rate': [0.1, 0.01, 0.5]\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 300 candidates, totalling 3000 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  58 tasks      | elapsed:    2.6s\n",
      "[Parallel(n_jobs=-1)]: Done 300 tasks      | elapsed:   16.4s\n",
      "[Parallel(n_jobs=-1)]: Done 706 tasks      | elapsed:   39.4s\n",
      "[Parallel(n_jobs=-1)]: Done 1272 tasks      | elapsed:  1.3min\n",
      "[Parallel(n_jobs=-1)]: Done 1805 tasks      | elapsed:  1.9min\n",
      "[Parallel(n_jobs=-1)]: Done 2250 tasks      | elapsed:  2.6min\n",
      "[Parallel(n_jobs=-1)]: Done 2777 tasks      | elapsed:  3.3min\n",
      "[Parallel(n_jobs=-1)]: Done 3000 out of 3000 | elapsed:  3.6min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[14:33:52] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=XGBRegressor(base_score=0.5, booster='gbtree',\n",
       "                                    colsample_bylevel=1, colsample_bynode=1,\n",
       "                                    colsample_bytree=1, gamma=0,\n",
       "                                    importance_type='gain', learning_rate=0.1,\n",
       "                                    max_delta_step=0, max_depth=3,\n",
       "                                    min_child_weight=1, missing=None,\n",
       "                                    n_estimators=100, n_jobs=1, nthread=None,\n",
       "                                    objective='reg:linear', random_state=0,\n",
       "                                    reg_alpha=0, reg_lambda=1,\n",
       "                                    scale_pos_weight=1, seed=None, silent=None,\n",
       "                                    subsample=1, verbosity=1),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'colsample_bytree': [0.4, 0.5, 0.6, 0.9, 1],\n",
       "                         'learning_rate': [0.1, 0.01, 0.5],\n",
       "                         'max_depth': [2, 3, 4, 5, 6],\n",
       "                         'n_estimators': [100, 200, 500, 1000]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=2)"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb = XGBRegressor()\n",
    "\n",
    "xgb_cv = GridSearchCV(xgb, \n",
    "                      param_grid = xgb_grid, \n",
    "                      cv = 10, \n",
    "                      n_jobs = -1,\n",
    "                      verbose = 2)\n",
    "\n",
    "\n",
    "xgb_cv.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'colsample_bytree': 0.5,\n",
       " 'learning_rate': 0.1,\n",
       " 'max_depth': 2,\n",
       " 'n_estimators': 1000}"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_cv.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[14:33:52] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    }
   ],
   "source": [
    "xgb_tuned = XGBRegressor(colsample_bytree = 0.9, \n",
    "                         learning_rate = 0.01, \n",
    "                         max_depth = 5, \n",
    "                         n_estimators = 1000) \n",
    "\n",
    "xgb_tuned = xgb_tuned.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "363.1126581668057"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = xgb_tuned.predict(X_test)\n",
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Light GBM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install lightgbm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "import lightgbm\n",
    "from lightgbm import LGBMRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#conda install -c conda-forge lightgbm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "from lightgbm import LGBMRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgbm = LGBMRegressor()\n",
    "lgbm_model = lgbm.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = lgbm_model.predict(X_test, \n",
    "                            num_iteration = lgbm_model.best_iteration_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "363.8712087611089"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n",
       "              importance_type='split', learning_rate=0.1, max_depth=-1,\n",
       "              min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n",
       "              n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,\n",
       "              random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n",
       "              subsample=1.0, subsample_for_bin=200000, subsample_freq=0)"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lgbm_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgbm_grid = {\n",
    "    'colsample_bytree': [0.4, 0.5,0.6,0.9,1],\n",
    "    'learning_rate': [0.01, 0.1, 0.5,1],\n",
    "    'n_estimators': [20, 40, 100, 200, 500,1000],\n",
    "    'max_depth': [1,2,3,4,5,6,7,8] }\n",
    "\n",
    "lgbm = LGBMRegressor()\n",
    "lgbm_cv_model = GridSearchCV(lgbm, lgbm_grid, cv=10, n_jobs = -1, verbose = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 960 candidates, totalling 9600 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  92 tasks      | elapsed:    1.8s\n",
      "[Parallel(n_jobs=-1)]: Done 576 tasks      | elapsed:   12.3s\n",
      "[Parallel(n_jobs=-1)]: Done 1388 tasks      | elapsed:   29.6s\n",
      "[Parallel(n_jobs=-1)]: Done 2520 tasks      | elapsed:   55.1s\n",
      "[Parallel(n_jobs=-1)]: Done 3980 tasks      | elapsed:  1.5min\n",
      "[Parallel(n_jobs=-1)]: Done 5760 tasks      | elapsed:  2.4min\n",
      "[Parallel(n_jobs=-1)]: Done 7868 tasks      | elapsed:  3.6min\n",
      "[Parallel(n_jobs=-1)]: Done 9600 out of 9600 | elapsed:  4.6min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=LGBMRegressor(boosting_type='gbdt', class_weight=None,\n",
       "                                     colsample_bytree=1.0,\n",
       "                                     importance_type='split', learning_rate=0.1,\n",
       "                                     max_depth=-1, min_child_samples=20,\n",
       "                                     min_child_weight=0.001, min_split_gain=0.0,\n",
       "                                     n_estimators=100, n_jobs=-1, num_leaves=31,\n",
       "                                     objective=None, random_state=None,\n",
       "                                     reg_alpha=0.0, reg_lambda=0.0, silent=True,\n",
       "                                     subsample=1.0, subsample_for_bin=200000,\n",
       "                                     subsample_freq=0),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'colsample_bytree': [0.4, 0.5, 0.6, 0.9, 1],\n",
       "                         'learning_rate': [0.01, 0.1, 0.5, 1],\n",
       "                         'max_depth': [1, 2, 3, 4, 5, 6, 7, 8],\n",
       "                         'n_estimators': [20, 40, 100, 200, 500, 1000]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=2)"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lgbm_cv_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'colsample_bytree': 0.6,\n",
       " 'learning_rate': 0.1,\n",
       " 'max_depth': 7,\n",
       " 'n_estimators': 40}"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lgbm_cv_model.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgbm_tuned = LGBMRegressor(learning_rate = 0.1, \n",
    "                           max_depth = 7, \n",
    "                           n_estimators = 40,\n",
    "                          colsample_bytree = 0.6)\n",
    "\n",
    "lgbm_tuned = lgbm_tuned.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = lgbm_tuned.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "370.0492876350467"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CatBoost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "hit = pd.read_csv(\"Hitters.csv\")\n",
    "df = hit.copy()\n",
    "df = df.dropna()\n",
    "dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])\n",
    "y = df[\"Salary\"]\n",
    "X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')\n",
    "X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, \n",
    "                                                    test_size=0.25, \n",
    "                                                    random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install catboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from catboost import CatBoostRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "catb = CatBoostRegressor()\n",
    "catb_model = catb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = catb_model.predict(X_test)\n",
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "catb_grid = {\n",
    "    'iterations': [200,500,1000,2000],\n",
    "    'learning_rate': [0.01, 0.03, 0.05, 0.1],\n",
    "    'depth': [3,4,5,6,7,8] }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "catb = CatBoostRegressor()\n",
    "catb_cv_model = GridSearchCV(catb, catb_grid, cv=5, n_jobs = -1, verbose = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "catb_cv_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "catb_cv_model.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "catb_tuned = CatBoostRegressor(iterations = 200, \n",
    "                               learning_rate = 0.01, \n",
    "                               depth = 8)\n",
    "\n",
    "catb_tuned = catb_tuned.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = catb_tuned.predict(X_test)\n",
    "np.sqrt(mean_squared_error(y_test, y_pred))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc-autonumbering": true
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
